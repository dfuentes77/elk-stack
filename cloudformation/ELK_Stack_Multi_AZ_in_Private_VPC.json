{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "ELK Stack - Elasticsearch, Logstash, Kibana",

    "Parameters": {

        "Stack": {
            "Description": "Stack applied as a tag",
            "Type": "String"
        },
        "KeyName": {
            "Default": "bootstrap",
            "Description": "Name of an existing EC2 KeyPair for SSH access",
            "Type": "String"
        },
        "Stage": {
            "Description": "Stage applied as a tag",
            "Type": "String",
            "Default": "PROD",
            "AllowedValues": [ "PROD", "CODE", "INFRA" ],
            "ConstraintDescription": "must be a valid stage eg. PROD, CODE, INFRA"
        },
        "ElkCapacity": {
            "Description": "Autoscale Size",
            "Type": "Number",
            "Default": "1",
            "MinValue": 1,
            "MaxValue": 12
        },
        "ElkInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m3.large",
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type"
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "String"
        },
        "PublicVpcSubnets" : {
            "Description": "Subnets to use in VPC for public ELB eg. subnet-abcd1234",
            "Type": "CommaDelimitedList"
        },
        "HostedZoneName": {
            "Description": "Route53 Hosted Zone in which kibana aliases will be created (without the trailing dot). Leave blank for no ALIAS.",
            "Type": "String",
            "AllowedPattern": "^(.*[^.]|)$"
        },
        "EBSVolumeSize": {
            "Description": "EBS storage to be attached to each instance (in GB). Set to zero for no attached EBS volume (the on-instance storage will be used instead).",
            "Type": "Number",
            "Default": 0,
            "MaxValue": 1000,
            "MinValue": 0
        },
        "ElkSnapshotRepository": {
            "Description": "S3 bucket name for elasticsearch snapshots repository",
            "Type": "String"
        },
        "ElkIndexKeepDays": {
            "Description": "Keep indices for x number of days",
            "Type": "Number",
            "Default": "8"
        }
    },

    "Conditions": {
        "HasDNS": { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "HostedZoneName" }, "" ] } ] },
        "UseEBS": { "Fn::Not": [ { "Fn::Equals" : [ { "Ref" : "EBSVolumeSize" }, "0" ] } ]}
    },

    "Mappings" : {
        "RegionMap" : {
            "us-east-1" :      { "ImageId": "ami-408c7f28" },
            "us-west-2" :      { "ImageId": "ami-f34032c3" },
            "us-west-1" :      { "ImageId": "ami-a26265e7" },
            "eu-west-1" :      { "ImageId": "ami-cb4986bc" },
            "ap-southeast-1" : { "ImageId": "ami-506d3102" },
            "ap-southeast-2" : { "ImageId": "ami-7bb8dd41" },
            "ap-northeast-1" : { "ImageId": "ami-19dd9218" },
            "sa-east-1" :      { "ImageId": "ami-8f0aa692" }
        },
        "InstanceMap": {
            "m3.medium": { "ESHeapSize": "2g" },
            "m3.large": { "ESHeapSize": "4g" },
            "m3.xlarge": { "ESHeapSize": "8g" },
            "m3.2xlarge": { "ESHeapSize": "15g" }
        }
    },

    "Resources": {

        "ElkS3Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "BucketName" : { "Ref": "ElkSnapshotRepository" },
                "AccessControl" : "Private"
            }
        },

        "ElkS3Policy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ElkS3Policy",
                "Groups": [],
                "Roles": [ { "Ref": "Role" } ],
                "Users": [],
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "ElkS3Bucket"} ]]}                            ]
                        },
                        {
                            "Action": [
                                "s3:GetObject",
                                "s3:PutObject",
                                "s3:DeleteObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "ElkS3Bucket"} , "/*"]]}
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                }
            }
        },

        "KibanaPublicLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "5601"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:5601/__es/",
                    "Timeout": "10",
                    "Interval": "20",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                },
                "Subnets": { "Ref": "PublicVpcSubnets" },
                "SecurityGroups": [
                    { "Ref": "KibanaPublicLoadBalancerSecurityGroup" }
                ]
            }
        },

        "LogstashInternalLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "TCP",
                        "LoadBalancerPort": "6379",
                        "InstancePort": "6379"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:6379",
                    "Timeout": "10",
                    "Interval": "20",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                },
                "Subnets": { "Ref": "PublicVpcSubnets" },
                "SecurityGroups": [
                    { "Ref": "LogstashInternalLoadBalancerSecurityGroup" }
                ]
            }
        },

        "ElkAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "VPCZoneIdentifier": { "Ref": "PublicVpcSubnets" },
                "LaunchConfigurationName": { "Ref": "ElkLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "12",
                "DesiredCapacity": { "Ref": "ElkCapacity" },
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [ { "Ref": "KibanaPublicLoadBalancer" }, { "Ref": "LogstashInternalLoadBalancer" } ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": "kibana",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Name",
                        "Value": "kibana",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },

        "ElkLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ImageId" ]},
                "SecurityGroups": [ { "Ref": "ElkSecurityGroup" }, { "Ref": "KibanaPublicLoadBalancerSecurityGroup" }, { "Ref": "LogstashInternalLoadBalancerSecurityGroup" } ],
                "InstanceType": { "Ref": "ElkInstanceType" },
                "BlockDeviceMappings": [ {
                    "Fn::If": [
                        "UseEBS",
                        {
                            "DeviceName" : "/dev/sdk",
                            "Ebs" : {
                                "VolumeSize" : { "Ref": "EBSVolumeSize"},
                                "VolumeType": "gp2"
                            }
                        },
                        { "Ref" : "AWS::NoValue" }
                    ]
                } ],
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "AssociatePublicIpAddress": "true",
                "KeyName": { "Ref": "KeyName" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "\n", [
                            "#!/bin/bash -v",

                            "wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add -",
                            "echo \"deb http://packages.elasticsearch.org/logstash/1.4/debian stable main\" > /etc/apt/sources.list.d/logstash.list",
                            "echo \"deb http://packages.elasticsearch.org/elasticsearch/1.4/debian stable main\" > /etc/apt/sources.list.d/elasticsearch.list",

                            "apt-get -y update",
                            "apt-get -y install language-pack-en build-essential openjdk-7-jre-headless logstash ntp python-pip",
                            "apt-get -y install elasticsearch=1.4.4",

                            "wget -O /etc/logstash/conf.d/logstash-indexer.conf https://raw.githubusercontent.com/dfuentes77/elk-stack/master/config/logstash-indexer.conf",
                            "sed -i -e 's,@@ELASTICSEARCH,localhost,g' /etc/logstash/conf.d/logstash-indexer.conf",

                            "/usr/share/elasticsearch/bin/plugin --install elasticsearch/elasticsearch-cloud-aws/2.1.1",
                            "/usr/share/elasticsearch/bin/plugin --install mobz/elasticsearch-head",
                            "/usr/share/elasticsearch/bin/plugin --install lukas-vlcek/bigdesk",
                            "/usr/share/elasticsearch/bin/plugin --install karmi/elasticsearch-paramedic",
                            "/usr/share/elasticsearch/bin/plugin --install royrusso/elasticsearch-HQ",

                            "wget -O /etc/elasticsearch/elasticsearch.yml https://raw.githubusercontent.com/dfuentes77/elk-stack/master/config/elasticsearch.yml",
                            { "Fn::Join": [ "", [ "sed -i",
                                " -e 's,@@REGION,", { "Ref": "AWS::Region" }, ",g'",
                                " -e 's,@@STACK,", { "Ref": "Stack" }, ",g'",
                                " -e 's,@@APP,kibana,g'",
                                " /etc/elasticsearch/elasticsearch.yml" ] ] },

                            "wget -O /etc/init/elasticsearch.conf https://raw.githubusercontent.com/dfuentes77/elk-stack/master/config/upstart-elasticsearch.conf",

                            { "Fn::Join": [ "", [ "sed -i",
                                                  " -e s,@@ES_HEAP_SIZE,", { "Fn::FindInMap" : [ "InstanceMap", { "Ref" : "ElkInstanceType" }, "ESHeapSize" ]}, ",g",
                                                  " /etc/init/elasticsearch.conf" ] ] },

                            { "Fn::If": [
                                "UseEBS",
                                { "Fn::Join": [ "\n", [
                                    "mkfs.ext4 /dev/xvdk",
                                    "mkdir /data",
                                    "mount /dev/xvdk /data",
                                    "echo '/dev/xvdk /data ext4 defaults 0 2' > /etc/fstab"
                                ]]},
                                { "Fn::Join": [ "\n", [
                                    "mkdir /data",
                                    "mount /dev/xvdb /data"
                                ]]}
                            ]},

                            "chown elasticsearch /data",

                            "sysctl vm.overcommit_memory=1",

                            "cd /opt",
                            "wget https://download.elastic.co/kibana/kibana/kibana-4.0.2-linux-x64.tar.gz",
                            "tar zxvf kibana-4.0.2-linux-x64.tar.gz",
                            "mv kibana-4.0.2-linux-x64 kibana",
                            "cd /etc/init.d",
                            "wget https://gist.githubusercontent.com/thisismitch/8b15ac909aed214ad04a/raw/bce61d85643c2dcdfbc2728c55a41dab444dca20/kibana4",
                            "chmod +x /etc/init.d/kibana4",
                            "update-rc.d kibana4 defaults 96 9",

                            "start logstash",
                            "start elasticsearch",
                            "service kibana4 start",

                            "while ! nc -z localhost 9200; do sleep 5; done; echo Elasticsearch is up!",
                            { "Fn::Join": [ "", [
                                "curl -XPUT 'http://localhost:9200/_snapshot/s3' -d '{",
                                    "\"type\": \"s3\",",
                                    "\"settings\": {",
                                        "\"bucket\": \"", { "Ref" : "ElkS3Bucket" }, "\",",
                                        "\"region\": \"", { "Ref" : "AWS::Region" }, "\"",
                                     "}",
                                "}' && echo"
                                ]
                            ]},
                            "curl 'http://localhost:9200/_snapshot/s3?pretty'",

                            "wget -O /usr/local/bin/backup.sh https://raw.githubusercontent.com/dfuentes77/elk-stack/master/scripts/backup.sh",
                            "chmod +x /usr/local/bin/backup.sh",
                            "echo '15 0 * * * root /usr/local/bin/backup.sh' >/etc/cron.d/backup",

                            "pip install elasticsearch-curator",
                            { "Fn::Join": [ "", [
                                "echo '30 0 * * * root /usr/local/bin/curator --logfile /var/log/elasticsearch/curator.log delete indices --older-than ",
                                { "Ref" : "ElkIndexKeepDays" },
                                " --time-unit days --timestring \"\\%Y.\\%m.\\%d\"' >/etc/cron.d/curator"
                                ]
                            ]}
                        ] ]
                    }
                }
            }
        },

        "KibanaPublicLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Allow access to kibana on public ELB from internet",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5601",
                        "ToPort": "5601",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "LogstashInternalLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Allow logstash messages to internal ELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "ElkSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow kibana from public and logstash from internal ELBs",
                "VpcId": { "Ref": "VpcId" },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "SourceSecurityGroupId": { "Ref": "LogstashInternalLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5601",
                        "ToPort": "5601",
                        "SourceSecurityGroupId": { "Ref": "KibanaPublicLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "ElkSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "ElkSecurityGroup", "GroupId" ] },
                "IpProtocol": "tcp",
                "FromPort": "9300",
                "ToPort": "9305",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "ElkSecurityGroup", "GroupId" ] }
            }
        },

        "Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName":"ec2-describe-instances",
                        "PolicyDocument": {
                            "Version" : "2012-10-17",
                            "Statement": [
                                {
                                    "Action": "ec2:DescribeInstances",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "Role" } ]
            }
        },
        "KibanaAlias": {
            "Type" : "AWS::Route53::RecordSetGroup",
            "Condition": "HasDNS",
            "Properties" : {
                "HostedZoneName" : { "Fn::Join": ["", [{ "Ref" : "HostedZoneName" }, "."]] },
                "Comment" : "Alias to kibana elb",
                "RecordSets" : [
                    {
                        "Name" : { "Fn::Join": [".", [ "kibana", {"Ref": "HostedZoneName"} ]] },
                        "Type" : "A",
                        "AliasTarget" : {
                           "HostedZoneId" : { "Fn::GetAtt" : ["KibanaPublicLoadBalancer", "CanonicalHostedZoneNameID"] },
                            "DNSName" : { "Fn::GetAtt" : ["KibanaPublicLoadBalancer","DNSName"] }
                        }
                    },
                    {
                        "Name" : { "Fn::Join": [".", [ "logstash", {"Ref": "HostedZoneName"} ]] },
                        "Type" : "A",
                        "AliasTarget" : {
                           "HostedZoneId" : { "Fn::GetAtt" : ["LogstashInternalLoadBalancer", "CanonicalHostedZoneNameID"] },
                            "DNSName" : { "Fn::GetAtt" : ["LogstashInternalLoadBalancer","DNSName"] }
                        }
                    }
                ]
            }
        }
    },

    "Outputs": {
        "LogstashEndpoint": {
            "Value": { "Fn::Join": ["", [ { "Fn::GetAtt": [ "LogstashInternalLoadBalancer", "DNSName" ]}, ":6379"]] },
            "Description": "Logging endpoint for Logstash TCP input"
        },
        "KibanaURL": {
            "Value": { "Fn::Join": ["", ["http://",
                { "Fn::If" : [ "HasDNS",
                    { "Fn::Join": [".", [ "kibana", {"Ref": "HostedZoneName"} ]] },
                    { "Fn::GetAtt": [ "KibanaPublicLoadBalancer", "DNSName" ]}
                ]}, "/#/dashboard/file/logstash.json"]] },
            "Description": "URL for the Kibana Dashboard"
        }
    }
}
